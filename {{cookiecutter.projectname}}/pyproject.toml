[tool.poetry]
name = "{{cookiecutter.python_package}}"
version = "0.1.0"
description = ""
authors = ["{{cookiecutter.name}} <{{cookiecutter.email}}>"]
packages = [
    { include = "{{cookiecutter.python_package}}" }
]

[tool.poetry.dependencies]
python = "^{{cookiecutter.python_version}}"
Flask = "*"
Inject = "*"
celery = "*"
flask-configurer = {git = "https://git@github.com/JacksonToomey/flask-config.git", rev = "{{ cookiecutter.configurer_version }}"}


[tool.poetry.dev-dependencies]
black = "*"
isort = "*"
pytest = "*"
pytest-flask = "*"
pytest-cov = "*"
pre-commit = "*"
flake8 = "*"
betamax = "*"
betamax-matchers = "*"
betamax-serializers = "*"
mypy = "*"
types-requests = "*"
celery-types = "*"

[tool.black]
line-length = 131
target-version = ['py{{ cookiecutter.python_version | replace(".", "") }}']

[tool.isort]
force_single_line = true
force_sort_within_sections = true
line_length = 131
lines_after_imports = 2

[tool.pytest.ini_options]
testpaths = "tests"
addopts = "--cov={{ cookiecutter.python_package }} --cov-report term-missing --cov-fail-under=100"

[tool.coverage.run]
omit = []

[tool.coverage.report]
exclude_lines = ["pragma: no cover", "\\.\\.\\."]

[tool.mypy]
python_version = "{{ cookiecutter.python_version }}"
files = ["{{ cookiecutter.python_package }}", "tests"]
ignore_missing_imports = true
warn_redundant_casts = true

[[tool.mypy.overrides]]
module = '{{ cookiecutter.python_package }}.*'
disallow_any_unimported = true
disallow_any_generics = true
disallow_subclassing_any = true
disallow_untyped_calls = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
no_implicit_optional = true
warn_unused_ignores = true
warn_no_return = true
warn_return_any = true
warn_unreachable = true
strict_equality = true
implicit_reexport = false

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"